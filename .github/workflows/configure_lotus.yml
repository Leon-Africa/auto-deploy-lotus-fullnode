name: lotus_full_node

on:
  push:
    branches:
      - main

permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read    # This is required for actions/checkout

jobs:
  check:
    strategy:
      fail-fast: true

    name: Lotus Full Node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: ${{ secrets.LOTUS_FULL_NODE_GH_ACTION_IAM_ROLE }}
            aws-region: us-east-1

      - name: Setup Profile
        shell: bash
        run: |
              aws configure set region us-east-1 --profile default
              aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile default
              aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile default
              aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile default

      - name: Check Profile
        shell: bash
        run: aws sts get-caller-identity --profile default

      - name: Remove pre-installed Ansible
        shell: bash
        run: | 
          python3 -m pip uninstall ansible   

      - name: Install Terraform
        shell: bash
        run: | 
          echo "Installing Terraform"
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
          --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
          --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform

      - name: Prepare creating Infrastructure
        shell: bash
        run: |
          echo "PREPARE DEPLOY INFRASTRUCTURE FOR LOTUS FULL NODE" 

      - name: Terraform Init
        shell: bash
        run: | 
          echo "Intialize Terraform"
          cd terraform/aws
          terraform init

      - name: Terraform Validate
        shell: bash
        run: | 
            echo "Validate Terraform"
            cd terraform/aws
            terraform validate

      - name: Terraform Plan
        shell: bash
        run: | 
            echo "Plan Terraform"
            cd terraform/aws
            terraform plan

      - name: Terraform Apply
        shell: bash
        run: | 
            echo "Apply Terraform"
            cd terraform/aws
            terraform apply -auto-approve

      - name: Wait before run configuration applied
        run: |
          sleep 10
        id: waiting

      - name: Install Ansible
        run: |
          python3 -m pip install --user ansible
          python3 -m pip show ansible
          which ansible
          sleep 10

      - name: Install boto and botocore
        run: |
          pip3 install botocore
          pip3 install boto3
        id: ansible_boto

      - name: Install Session Manager Plugin
        run: |
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          sudo dpkg -i session-manager-plugin.deb
          session-manager-plugin
        id: ssm_plugin

      - name: Check version
        run: |
          ansible --version
        id: ansible_version

      - name: Install Ansible Collections
        run: |
          cd ansible/
          ansible-galaxy collection install -r requirements.yml
        id: ansible_collections

      - name: Install Ansible Go
        run: |
          cd ansible/
          ansible-galaxy install geerlingguy.go
        id: ansible_go_galaxy

      - name: Get InstanceID
        run: |
          INSTANCE_ID=$(aws ssm describe-instance-information --filters "Key=tag-key,Values=Name" --query "InstanceInformationList[0].InstanceId" | tr -d '"')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        id: lotus_full_node_instance_id

      - name: Sample SSM send command [Affirm Connectivity]
        run: |
          aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["echo send command working"]' \
          --targets "Key=instanceids,Values=${{ env.INSTANCE_ID }}" \
          --comment "echo send command working"
        id: lotus_full_node_ssm_send_command

      - name: Wait before run list inventory
        run: |
          sleep 10
        id: pause

      - name: List Inventory
        run: |
          cd ansible/
          pwd
          AWS_PROFILE=default ansible-inventory -i inventory/aws_ec2.yml --list | jq "keys" 
        id: ansible_inventory

      - name: Run SSM Playbook to setup Lotus Full Node
        run: |
          cd ansible/
          pwd
          AWS_PROFILE=default ansible-playbook -i inventory/aws_ec2.yml playbooks/lotus_setup.yml --limit lotus_full_node --flush-cache -vvv
        env:
            PY_COLORS: '1'
            ANSIBLE_FORCE_COLOR: '1'
        id: ansible_playbook_lotus_node
